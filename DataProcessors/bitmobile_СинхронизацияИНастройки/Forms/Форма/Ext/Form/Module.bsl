
/////////////////////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

&НаСервере
Процедура ПриОткрытииСервер()
	
	СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса = НомерСеансаИнформационнойБазы();
	
	Для Каждого СеансИБ Из СеансыИБ Цикл 
		
		Если СеансИБ.НомерСеанса = НомерСеанса Тогда 
			
			IDСеанса = Строка(СеансИБ.НомерСеанса) + Строка(СеансИБ.НачалоСеанса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Метаданные.Имя = "BitCatch" Тогда
		
		Элементы.НаборКонстантbitmobile_ВерсияКонфигурации.ТолькоПросмотр = Истина;
		Элементы.НаборКонстантbitmobile_ИмяКонфигурации.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	УстановитьКоличествоНесинхронизированных();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоНесинхронизированных()
	
	Запрос = Новый Запрос(
	"SELECT
	|	bitmobile_ИзмененныеДанные.Ссылка,
	|	bitmobile_ИзмененныеДанные.Обрабатывается,
	|	bitmobile_ИзмененныеДанные.Порядок
	|FROM
	|	InformationRegister.bitmobile_ИзмененныеДанные AS bitmobile_ИзмененныеДанные");
	РезультатЗапроса = Запрос.Execute().Unload();
	ЭтаФорма.НесинхронизированныхОбъектов = РезультатЗапроса.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСостояниеСинхронизации(СинхронизацияНачата)
	
	Попытка
		
		СинхронизацияНачата = Константы.bitmobile_СинхронизацияЗапущена.Получить();
		
	Исключение
		
		Сообщение 							= Новый СообщениеПользователю;
		Сообщение.Текст 					= "Ошибка при получении текущего состояния синхронизации";
		Сообщение.ИдентификаторНазначения 	= ЭтаФорма.УникальныйИдентификатор;
		Сообщение.Сообщить();
		
		Возврат;

	КонецПопытки;
			
	Если Не СинхронизацияНачата = "" Тогда 
		
		Если СинхронизацияНачата = IDСеанса Тогда 
			
			Сообщение 							= Новый СообщениеПользователю;
			Сообщение.Текст 					= "Синхронизация уже запущена вами";
			Сообщение.ИдентификаторНазначения 	= ЭтаФорма.УникальныйИдентификатор;
			Сообщение.Сообщить();

			Возврат;
			
		Иначе 
			
			СеансыИБ = ПолучитьСеансыИнформационнойБазы();
			
			Для Каждого СеансИБ Из СеансыИБ Цикл
				
				Если Строка(СеансИБ.НомерСеанса) + Строка(СеансИБ.НачалоСеанса) = СинхронизацияНачата Тогда 
					
					Сообщение 							= Новый СообщениеПользователю;
					Сообщение.Текст 					= "Синхронизация уже запущена пользователем.";
					Сообщение.ИдентификаторНазначения 	= ЭтаФорма.УникальныйИдентификатор;
					Сообщение.Сообщить();
						
					Возврат;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, IDОкна)
	
	Обработки.bitmobile_СинхронизацияИНастройки.ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, IDОкна);
	
КонецФункции

&НаСервере
Функция ПолучитьIDВыгрузки()
	
	Возврат Константы.bitmobile_IDВыгрузки.Получить();

КонецФункции

&НаСервере
Процедура ВыгрузитьМетаданныеВФайлСервер(АдресВХ)
	
	Обработки.bitmobile_СинхронизацияИНастройки.ВыгрузитьМетаданные(АдресВХ);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьПорядокВыгрузкиСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	bitmobile_НастройкиСинхронизации.Ссылка КАК Настройка,
		|	bitmobile_НастройкиСинхронизации.ОбъектКонфигурации
		|ИЗ
		|	Справочник.bitmobile_НастройкиСинхронизации КАК bitmobile_НастройкиСинхронизации
		|ГДЕ
		|	bitmobile_НастройкиСинхронизации.ПометкаУдаления = ЛОЖЬ
		|	И bitmobile_НастройкиСинхронизации.ВыгрузкаДанных = ИСТИНА";

	ТаблицаОбработки = Запрос.Выполнить().Выгрузить();

	ДеревоОбработки = Новый ДеревоЗначений;
	ДеревоОбработки.Колонки.Добавить("Настройка");
	ДеревоОбработки.Колонки.Добавить("ОбъектКонфигурации");
		
	НайденыОшибки = Ложь;
		
	// Найти требуемые для выгрузки объекта настройки
	Для Каждого СтрокаНастройки Из ТаблицаОбработки Цикл 
		
		Если НайденыОшибки Тогда 
			Прервать;
		КонецЕсли;	
		
		МассивПройденных = Новый Массив;
		
		ОбойтиНастройкиРекурсивно(СтрокаНастройки.Настройка, ДеревоОбработки, ТаблицаОбработки, НайденыОшибки, МассивПройденных);
		
	КонецЦикла;	
	
	Если Не НайденыОшибки Тогда 
		
		ТаблицаПорядка = Новый ТаблицаЗначений;
		ТаблицаПорядка.Колонки.Добавить("Настройка");
		
		Для Каждого Уровень Из ДеревоОбработки.Строки Цикл 
			
			Если ТаблицаПорядка.Найти(Уровень.Настройка) = Неопределено Тогда 
				
				ЗаполнитьТаблицуПорядка(Уровень, ТаблицаПорядка);
				
				Вставка = ТаблицаПорядка.Добавить();
				Вставка.Настройка = Уровень.Настройка;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Инд = 0;
		
		// Применить таблицу порядка
		Для Каждого СтрокаПорядка Из ТаблицаПорядка Цикл 
			
			Инд = Инд + 1;
			
			ОбъектНастройки = СтрокаПорядка.Настройка.ПолучитьОбъект();
			ОбъектНастройки.ПозицияВВыгрузке = Инд;
			ОбъектНастройки.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиНастройкиРекурсивно(Настройка, СтрокаДереваОбработки, ТаблицаОбработки, НайденыОшибки, МассивПройденных)
	
	Если НайденыОшибки Тогда 
		Возврат;
	КонецЕсли;	
	
	ВставкаНастройки					= СтрокаДереваОбработки.Строки.Добавить();
	ВставкаНастройки.Настройка			= Настройка;
	ВставкаНастройки.ОбъектКонфигурации	= Настройка.ОбъектКонфигурации;
	
	МассивПройденных.Добавить(Настройка);
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Настройка.ОбъектКонфигурации);
	
	// Обработать реквизиты шапки
	Для Каждого СтрокаРеквизитаШапки Из Настройка.РеквизитыШапки Цикл 
		
		Если ЗначениеЗаполнено(СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile) Тогда 
			
			Если СтрокаРеквизитаШапки.ПриводитьКСтроке Тогда 
				
				Продолжить;
				
			КонецЕсли;	
			
			Если СтрокаРеквизитаШапки.СтандартныйРеквизит Тогда 
				
				ТипРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты[СтрокаРеквизитаШапки.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
				
				Если Не МетаданныеРеквизита = Неопределено И Не СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile = "Id" Тогда 
					
					Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
						
						ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
						
						НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
					
						Если Не НайденнаяНастройка = Неопределено Тогда 
							
							Если Не НайденнаяНастройка.Настройка = Настройка Тогда
								
								Если МассивПройденных.Найти(НайденнаяНастройка.Настройка) = Неопределено Тогда 
							
									ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, НайденыОшибки, МассивПройденных);
									
								Иначе
									
									СообщитьОВозможнойЦиклическойСсылке(МассивПройденных, НайденнаяНастройка.Настройка);
									
								КонецЕсли;
																
							КонецЕсли;	
							
						Иначе 
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile;
							Сообщение.Сообщить();
							
							НайденыОшибки = Истина;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе 
				
				Попытка
					
					ТипРеквизита = МетаданныеОбъекта.Реквизиты[СтрокаРеквизитаШапки.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
					
					МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "В настройке """ + Настройка.ОбъектКонфигурации + """ не найден реквизит шапки """ + СтрокаРеквизитаШапки.РеквизитОбъектаКонфигурации + """. Сообщение об ошибке: """ + ОписаниеОшибки() + """";
					Сообщение.Сообщить();
					
					НайденыОшибки = Истина;
					
					Прервать;
					
				КонецПопытки;
				
				Если Не МетаданныеРеквизита = Неопределено Тогда 
					
					Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
						
						ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
						
						НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
						
						Если Не НайденнаяНастройка = Неопределено Тогда 
							
							Если Не НайденнаяНастройка.Настройка = Настройка Тогда
								
								Если МассивПройденных.Найти(НайденнаяНастройка.Настройка) = Неопределено Тогда 
							
									ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, НайденыОшибки, МассивПройденных);
									
								Иначе
									
									СообщитьОВозможнойЦиклическойСсылке(МассивПройденных, НайденнаяНастройка.Настройка);	
									
								КонецЕсли;	
									
							КонецЕсли;
							
						Иначе 
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаРеквизитаШапки.РеквизитОбъектаBitmobile;
							Сообщение.Сообщить();
							
							НайденыОшибки = Истина;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	// Обработать табличные части
	Для Каждого СтрокаТабличнойЧасти Из Настройка.ТабличныеЧасти Цикл 
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile) Тогда 
			
			ТаблицаРеквизитов = Настройка.РеквизитыТабличныхЧастей.НайтиСтроки(Новый Структура("ТабличнаяЧастьОбъектаКонфигурации", СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаКонфигурации));
			
			Если СтрокаТабличнойЧасти.Запрос Тогда 
				
				Попытка
					
					Построитель = Новый ПостроительЗапроса;
					Построитель.Текст = СтрокаТабличнойЧасти.ТекстЗапроса;
					Построитель.ЗаполнитьНастройки();
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Обнаружен некорректный запрос в настройке """ + Настройка.ОбъектКонфигурации + """. Сообщение об ошибке: """ + ОписаниеОшибки() + """";
					Сообщение.Сообщить();
					
					НайденыОшибки = Истина;
					
					Прервать;
					
				КонецПопытки;
				
				Для Каждого СтрокаРеквизитаТЧ Из ТаблицаРеквизитов Цикл
					
					Если ЗначениеЗаполнено(СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile) Тогда
						
						Если СтрокаРеквизитаТЧ.ПриводитьКСтроке Тогда 
							
							Продолжить;
							
						КонецЕсли;
						
						ПолеТипа = Построитель.ДоступныеПоля.Найти(СтрокаРеквизитаТЧ.РеквизитОбъектаКонфигурации);
						
						ТипыРеквизита = ПолеТипа.ТипЗначения.Типы();
						
						ТипNull = ТипыРеквизита.Найти(Тип("Null"));
						
						Если ТипыРеквизита.Количество() = 2 И Не ТипNull = Неопределено Тогда
							
							ТипыРеквизита.Удалить(ТипNull);
							
						КонецЕсли;
						
						ТипРеквизита = ТипыРеквизита.Получить(0);
						
						МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
						
						Если Не МетаданныеРеквизита = Неопределено И Не СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile = "Ref" Тогда 
							
							Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
								
								ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
								
								НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
							
								Если Не НайденнаяНастройка = Неопределено Тогда 
									
									Если Не НайденнаяНастройка.Настройка = Настройка Тогда
										
										Если МассивПройденных.Найти(НайденнаяНастройка.Настройка) = Неопределено Тогда 
											
											ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, НайденыОшибки, МассивПройденных);
											
										Иначе
											
											СообщитьОВозможнойЦиклическойСсылке(МассивПройденных, НайденнаяНастройка.Настройка);	
											
										КонецЕсли;
										
									КонецЕсли;
									
								Иначе 
									
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile + "." + СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile;
									Сообщение.Сообщить();
									
									НайденыОшибки = Истина;
									
									Прервать;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе 
				
				Для Каждого СтрокаРеквизитаТЧ Из ТаблицаРеквизитов Цикл 
				
					Если ЗначениеЗаполнено(СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile) Тогда 
						
						Если СтрокаРеквизитаТЧ.ПриводитьКСтроке Тогда 
				
							Продолжить;
							
						КонецЕсли;
						
						Если СтрокаРеквизитаТЧ.СтандартныйРеквизит Тогда 
							
							Если Не СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile = "Ref" Тогда 
							
								ТипРеквизита = МетаданныеОбъекта.ТабличныеЧасти[СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаКонфигурации].СтандартныеРеквизиты[СтрокаРеквизитаТЧ.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
								
								МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
								
								Если Не МетаданныеРеквизита = Неопределено Тогда 
									
									Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
										
										ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
										
										НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
									
										Если Не НайденнаяНастройка = Неопределено Тогда 
											
											Если Не НайденнаяНастройка.Настройка = Настройка Тогда
												
												Если МассивПройденных.Найти(НайденнаяНастройка.Настройка) = Неопределено Тогда 
													
													ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, НайденыОшибки, МассивПройденных);
													
												Иначе
													
													СообщитьОВозможнойЦиклическойСсылке(МассивПройденных, НайденнаяНастройка.Настройка);	
													
												КонецЕсли;	
												
											КонецЕсли;
											
										Иначе 
											
											Сообщение = Новый СообщениеПользователю;
											Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile + "." + СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile;
											Сообщение.Сообщить();
											
											НайденыОшибки = Истина;
											
											Прервать;
											
										КонецЕсли;
										
									КонецЕсли;	
									
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе 
							
							Попытка
								
								ТипРеквизита = МетаданныеОбъекта.ТабличныеЧасти[СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаКонфигурации].Реквизиты[СтрокаРеквизитаТЧ.РеквизитОбъектаКонфигурации].Тип.Типы().Получить(0);
								
								МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
								
							Исключение
								
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = "В настройке """ + Настройка.ОбъектКонфигурации + """ не найден реквизит табличной части """ + СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаКонфигурации + "." + СтрокаРеквизитаТЧ.РеквизитОбъектаКонфигурации + """. Сообщение об ошибке: """ + ОписаниеОшибки() + """";
								Сообщение.Сообщить();
								
								НайденыОшибки = Истина;
								
								Прервать;
								
							КонецПопытки;
							
							Если Не МетаданныеРеквизита = Неопределено Тогда 
								
								Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда  
									
									ПолноеИмяМетаданного = МетаданныеРеквизита.ПолноеИмя();
									
									НайденнаяНастройка = ТаблицаОбработки.Найти(ПолноеИмяМетаданного, "ОбъектКонфигурации");
									
									Если Не НайденнаяНастройка = Неопределено Тогда 
										
										Если Не НайденнаяНастройка.Настройка = Настройка Тогда
											
											Если МассивПройденных.Найти(НайденнаяНастройка.Настройка) = Неопределено Тогда 
												
												ОбойтиНастройкиРекурсивно(НайденнаяНастройка.Настройка, ВставкаНастройки, ТаблицаОбработки, НайденыОшибки, МассивПройденных);
												
											Иначе
												
												СообщитьОВозможнойЦиклическойСсылке(МассивПройденных, НайденнаяНастройка.Настройка);	
												
											КонецЕсли;	
												
										КонецЕсли;
										
									Иначе 
										
										Сообщение = Новый СообщениеПользователю;
										Сообщение.Текст = "Отсутствует настройка для " + Настройка.Наименование + "." + СтрокаТабличнойЧасти.ТабличнаяЧастьОбъектаBitmobile + "." + СтрокаРеквизитаТЧ.РеквизитОбъектаBitmobile;
										Сообщение.Сообщить();
										
										НайденыОшибки = Истина;
										
										Прервать;
										
									КонецЕсли;
									
								КонецЕсли;	
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;	
				
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НайденнаяСтрока = МассивПройденных.Найти(Настройка);

	МассивПройденных.Удалить(НайденнаяСтрока);
	
КонецПроцедуры	

&НаСервере
Процедура СообщитьОВозможнойЦиклическойСсылке(МассивПройденных, ПоследнийЭлемент)

	СтрокаЦикла = "";
	
	Для Каждого Элемент Из МассивПройденных Цикл
		
		СтрокаЦикла = СтрокаЦикла + Строка(Элемент) + " --> ";
		
	КонецЦикла;	
	
	СтрокаЦикла = СтрокаЦикла + Строка(ПоследнийЭлемент) + " --> ";
	
	СтрокаЦикла = Лев(СтрокаЦикла, СтрДлина(СтрокаЦикла) - 5);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Внимание! Возможна циклическая ссылка по следующему пути: " + СтрокаЦикла;
	Сообщение.Сообщить();
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьТаблицуПорядка(Уровень, ТаблицаПорядка)
	
	Для Каждого Стр Из Уровень.Строки Цикл  
		
		Если ТаблицаПорядка.Найти(Стр.Настройка) = Неопределено Тогда 
			
			ЗаполнитьТаблицуПорядка(Стр, ТаблицаПорядка);
						
			ВставкаКонтейнера = ТаблицаПорядка.Добавить();
			ВставкаКонтейнера.Настройка = Стр.Настройка;
					    								
		КонецЕсли;
						
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус)

	ПоследняяДата = Константы.bitmobile_ДатаПоследнейВыгрузкиДанных.Получить();
    ПоследнийСтатус = Константы.bitmobile_СтатусПоследнейВыгрузкиДанных.Получить();

КонецФункции

&НаСервере
Функция ПолучитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус)

	ПоследняяДата = Константы.bitmobile_ДатаПоследнейЗагрузкиДанных.Получить();
    ПоследнийСтатус = Константы.bitmobile_СтатусПоследнейЗагрузкиДанных.Получить();

КонецФункции

&НаСервере
Функция ПолучитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных)

	ПоследняяДатаУдаленных = Константы.bitmobile_ДатаПоследнейСинхронизацииУдаленныхДанных.Получить();
    ПоследнийСтатусУдаленных = Константы.bitmobile_СтатусПоследнейСинхронизацииУдаленныхДанных.Получить();

КонецФункции

&НаСервере
Функция ПолучитьИнформациюПоСинхронизацииФайлов(ПоследняяДатаФайлов, ПоследнийСтатусФайлов, СинхронизацияФайловЗапущена)

	ПоследняяДатаФайлов 		= Константы.bitmobile_ДатаПоследнейСинхронизацииФайлов.Получить();
    ПоследнийСтатусФайлов 		= Константы.bitmobile_СтатусПоследнейСинхронизацииФайлов.Получить();
	СинхронизацияФайловЗапущена = Константы.bitmobile_СинхронизацияФайловЗапущена.Получить();
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиВФайлСервер(АдресВХ)
	
	Обработки.bitmobile_СинхронизацияИНастройки.СохранитьНастройкиВФайл(АдресВХ);
		
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзФайлаСервер(АдресВХ, НастройкиПоУмолчанию = Ложь)
	
	Обработки.bitmobile_СинхронизацияИНастройки.ВосстановитьНастройкиИзФайла(АдресВХ, НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбщиеНастройкиСервер()
	
	ЭтаФорма.Записать();
	
КонецПроцедуры

//////////////////////////////////////////////
// Серверные процедуры для синхронизации

&НаСервере 
Процедура СинхронизироватьДанныеСервер()
	
	СинхронизацияНачата = "";
	
	ПроверитьСостояниеСинхронизации(СинхронизацияНачата);
	
	Если Не ЗначениеЗаполнено(СинхронизацияНачата) Тогда
	
		bitmobile_ОбработчикиСинхронизацииИПодписок.Синхронизация();
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьФайлыСервер()
	
	СинхронизацияЗапущена = Константы.bitmobile_СинхронизацияФайловЗапущена.Получить();
	
	Если СинхронизацияЗапущена Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Cинхронизация файлов уже запущена";
		Сообщение.Сообщить();
		
	Иначе	
		
		КонстантаУстановлена = Ложь;	
		
		Попытка
		
			Константы.bitmobile_СинхронизацияФайловЗапущена.Установить(Истина);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Cинхронизация файлов в процессе...";
			Сообщение.Сообщить();
			
			КонстантаУстановлена = Истина;
			
		Исключение
				
		КонецПопытки;
		
		Если КонстантаУстановлена Тогда 
		
			Обработки.bitmobile_СинхронизацияИНастройки.СинхронизироватьФайлы();
			
			Константы.bitmobile_СинхронизацияФайловЗапущена.Установить(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьУдаленныеДанныеСервер()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Синхронизация удаленных данных в процессе...";
	Сообщение.Сообщить();
	
	СинхронизацияЗавершена = False;
	
	Обработки.bitmobile_СинхронизацияИНастройки.СинхронизироватьУдаленныеДанные(СинхронизацияЗавершена);
		
	Если СинхронизацияЗавершена Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Синхронизация удаленных данных прошла успешно.";
		Сообщение.Сообщить();
		
		Обработки.bitmobile_СинхронизацияИНастройки.СохранитьСтатусСинхронизацииУдаленных(Истина);
					
	Иначе  
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Синхронизация удаленных данных не удалась.";
		Сообщение.Сообщить();
		
		Обработки.bitmobile_СинхронизацияИНастройки.СохранитьСтатусСинхронизацииУдаленных(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////
// Командный интерфейс

&НаКлиенте
Процедура ОбновитьДанныеСписков()
	
	Элементы.ТаблицаНастроек.Обновить();
	Элементы.КонтролируемыеИзмеренияРегистров.Обновить();
	Элементы.СоответствиеПеречислений.Обновить();
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаНастроекПриИзменении(Элемент)
	
	Элементы.КонтролируемыеИзмеренияРегистров.Обновить();
	Элементы.СоответствиеПеречислений.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус, ЭтоОповещениеОтНачальнойСтраницы, IDВыгрузки = "")
	
	Если ЗначениеЗаполнено(IDВыгрузки) Тогда 
		
		Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Зеленый;
		ДатаПоследнейВыгрузкиДанных = "Выполняется";
		
		Если Не ЭтоОповещениеОтНачальнойСтраницы Тогда
		
			ПодключитьОбработчикОжидания("ВыполнитьПроверкуВыгрузки", 20);
			
		КонецЕсли;
		
	Иначе 	
	
		Если ЗначениеЗаполнено(ПоследняяДата) Тогда 
			
			Если ПоследнийСтатус Тогда 
				
				Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Зеленый;
				ДатаПоследнейВыгрузкиДанных = Строка(ПоследняяДата) + " (выполнена)";
				
			Иначе 
				
				Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Красный;
				ДатаПоследнейВыгрузкиДанных = Строка(ПоследняяДата) + " (не выполнена)";
							
			КонецЕсли;
					
		Иначе 
			
			Элементы.ДатаПоследнейВыгрузкиДанных.ЦветТекста = WebЦвета.Красный;
			ДатаПоследнейВыгрузкиДанных = "нет данных";
							
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ВыполнитьПроверкуВыгрузки");
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус)
	
	Если ЗначениеЗаполнено(ПоследняяДата) Тогда 
		
		Если ПоследнийСтатус Тогда 
			
			Элементы.ДатаПоследнейЗагрузкиДанных.ЦветТекста = WebЦвета.Зеленый;
			ДатаПоследнейЗагрузкиДанных = Строка(ПоследняяДата) + " (выполнена)";
			
		Иначе 
			
			Элементы.ДатаПоследнейЗагрузкиДанных.ЦветТекста = WebЦвета.Красный;
			ДатаПоследнейЗагрузкиДанных = Строка(ПоследняяДата) + " (не выполнена)";
						
		КонецЕсли;
				
	Иначе 
		
		Элементы.ДатаПоследнейЗагрузкиДанных.ЦветТекста = WebЦвета.Красный;
		ДатаПоследнейЗагрузкиДанных = "нет данных";
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных)
	
	Если ЗначениеЗаполнено(ПоследняяДатаУдаленных) Тогда 
		
		Если ПоследнийСтатусУдаленных Тогда 
			
			Элементы.ДатаПоследнейСинхронизацииУдаленныхДанных.ЦветТекста = WebЦвета.Зеленый;
			ДатаПоследнейСинхронизацииУдаленныхДанных = Строка(ПоследняяДатаУдаленных) + " (выполнена)";
			
		Иначе 
			
			Элементы.ДатаПоследнейСинхронизацииУдаленныхДанных.ЦветТекста = WebЦвета.Красный;
			ДатаПоследнейСинхронизацииУдаленныхДанных = Строка(ПоследняяДатаУдаленных) + " (не выполнена)";
						
		КонецЕсли;
				
	Иначе 
		
		Элементы.ДатаПоследнейСинхронизацииУдаленныхДанных.ЦветТекста = WebЦвета.Красный;
		ДатаПоследнейСинхронизацииУдаленныхДанных = "нет данных";
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнформациюПоСинхронизацииФайлов(ПоследняяДатаФайлов, ПоследнийСтатусФайлов, ЭтоОповещениеОтНачальнойСтраницы, СинхронизацияФайловЗапущена)
	
	Если СинхронизацияФайловЗапущена Тогда
		
		Элементы.ДатаПоследнейСинхронизацииФайлов.ЦветТекста = WebЦвета.Зеленый;
		ДатаПоследнейСинхронизацииФайлов = "Выполняется";
		
		Если Не ЭтоОповещениеОтНачальнойСтраницы Тогда
			
			ПодключитьОбработчикОжидания("ВыполнитьПроверкуСинхронизацииФайлов", 20);
			
		КонецЕсли;
		
	Иначе	
		
		Если ЗначениеЗаполнено(ПоследняяДатаФайлов) Тогда 
			
			Если ПоследнийСтатусФайлов Тогда 
				
				Элементы.ДатаПоследнейСинхронизацииФайлов.ЦветТекста = WebЦвета.Зеленый;
				ДатаПоследнейСинхронизацииФайлов = Строка(ПоследняяДатаФайлов) + " (выполнена)";
				
			Иначе 
				
				Элементы.ДатаПоследнейСинхронизацииФайлов.ЦветТекста = WebЦвета.Красный;
				ДатаПоследнейСинхронизацииФайлов = Строка(ПоследняяДатаФайлов) + " (выполнена с ошибками)";
							
			КонецЕсли;
					
		Иначе 
			
			Элементы.ДатаПоследнейСинхронизацииФайлов.ЦветТекста = WebЦвета.Красный;
			ДатаПоследнейСинхронизацииФайлов = "нет данных";
							
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ВыполнитьПроверкуСинхронизацииФайлов");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не Отказ Тогда
		
		ПриОткрытииСервер();
		
		Если ЗначениеЗаполнено(IDВыгрузки) Тогда 
			
			ПодключитьОбработчикОжидания("ВыполнитьПроверкуВыгрузки", 20);
			
		КонецЕсли;
		
		ОбновитьИнформацию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуВыгрузки()
	
	ПроверитьАсинхроннуюВыгрузку(IDВыгрузки, ЭтаФорма.УникальныйИдентификатор);
	
	ОбновитьИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуСинхронизацииФайлов()
	
	ОбновитьИнформацию();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформацию(ЭтоОповещениеОтНачальнойСтраницы = Ложь)
	
	IDВыгрузки 		= ПолучитьIDВыгрузки();
	ПоследняяДата 	= Неопределено;
	ПоследнийСтатус = Ложь;
	
	ПолучитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус);
	УстановитьИнформациюПоВыгрузке(ПоследняяДата, ПоследнийСтатус, ЭтоОповещениеОтНачальнойСтраницы, IDВыгрузки);
	
	ПоследняяДата 	= Неопределено;
	ПоследнийСтатус = Ложь;
	
	ПолучитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус);
	УстановитьИнформациюПоЗагрузке(ПоследняяДата, ПоследнийСтатус);
	
	ПоследняяДата 	= Неопределено;
	ПоследнийСтатус = Ложь;
	
	ПолучитьИнформациюПоСинхронизацииУдаленных(ПоследняяДата, ПоследнийСтатус);
	УстановитьИнформациюПоСинхронизацииУдаленных(ПоследняяДата, ПоследнийСтатус);
	
	ПоследняяДата 				= Неопределено;
	ПоследнийСтатус 			= Ложь;
	СинхронизацияФайловЗапущена = Ложь;
	
	ПолучитьИнформациюПоСинхронизацииФайлов(ПоследняяДата, ПоследнийСтатус, СинхронизацияФайловЗапущена);
	УстановитьИнформациюПоСинхронизацииФайлов(ПоследняяДата, ПоследнийСтатус, ЭтоОповещениеОтНачальнойСтраницы, СинхронизацияФайловЗапущена);
	
	Если Не ЭтоОповещениеОтНачальнойСтраницы Тогда
		
		Оповестить("ReloadInfoOnStartPage");
		
	КонецЕсли;
	
	УстановитьКоличествоНесинхронизированных();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииПоУмолчанию(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("НастройкиСинхронизацииПоУмолчаниюОкончание", ЭтаФорма)
				  , "Настройки будут перезаполнены. Продолжить?"
				  , РежимДиалогаВопрос.ДаНет
				  , 0
				  , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииПоУмолчаниюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		ВосстановитьНастройкиИзФайлаСервер(Неопределено, Истина);
		
		ОбновитьДанныеСписков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанные(Команда)
	
	СинхронизироватьДанныеСервер();
	
	ОбновитьИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьФайлы(Команда)
	
	СинхронизироватьФайлыСервер();
	
	ОбновитьИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьУдаленныеДанные(Команда)
	
	СинхронизироватьУдаленныеДанныеСервер();
	 
	ПоследняяДатаУдаленных = Неопределено;
	ПоследнийСтатусУдаленных = Ложь;
	
	ПолучитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных);
	УстановитьИнформациюПоСинхронизацииУдаленных(ПоследняяДатаУдаленных, ПоследнийСтатусУдаленных);
	 
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбщиеНастройки(Команда)
	
	СохранитьОбщиеНастройкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьМетаданныеВФайл(Команда)
	
	АдресВХ = "";
	
	ВыгрузитьМетаданныеВФайлСервер(АдресВХ);
	
	Если ЗначениеЗаполнено(АдресВХ) Тогда 
		
		ПолучитьФайл(АдресВХ, "metadata.xml", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВФайл(Команда)
	
	ОткрытьФорму("Обработка.bitmobile_СинхронизацияИНастройки.Форма.ФормаПодтвержденияВыгрузки", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПолучателейОтчетов(Команда)
	
	ОткрытьФорму("РегистрСведений.bitmobile_АдресаЭлПочтыДляОтчетов.Форма.ФормаСписка", Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина), ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПорядокВыгрузки(Команда)
	
	РассчитатьПорядокВыгрузкиСервер();
	
	Элементы.ТаблицаНастроек.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнформациюОСинхронизации" Тогда
		
		ОбновитьИнформацию(Истина);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	АдресВХ = "";
	
	СохранитьНастройкиВФайлСервер(АдресВХ);
	
	Если ЗначениеЗаполнено(АдресВХ) Тогда 
		
		ПолучитьФайл(АдресВХ, "settings.xml", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайла(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВосстановитьНастройкиИзФайлаОкончание", ЭтаФорма)
				  , "Настройки будет перезаполнены. Продолжить?"
				  , РежимДиалогаВопрос.ДаНет
				  , 0
				  , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайлаОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ВосстановитьНастройкиИзФайлаВыборФайлаОкончание", ЭтаФорма)
							,
							, "settings.xml"
							, Истина
							, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайлаВыборФайлаОкончание(Результат, АдресВХ, ИмяФайла, Параметры) Экспорт
	
	Если Не Результат Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВХ) Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Восстановление настроек в процессе...";
		Сообщение.Сообщить();
		
		ВосстановитьНастройкиИзФайлаСервер(АдресВХ);
		
		ОбновитьДанныеСписков();
		
	КонецЕсли;
	
КонецПроцедуры

&AtClient
Процедура ОбновитьКоличествоНесинхронизированных(Команда)
	
	УстановитьКоличествоНесинхронизированных();
	
КонецПроцедуры































	

	



























